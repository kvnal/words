{"version":3,"sources":["Components/Display.js","Components/Nav.js","App.js","index.js"],"names":["Display","useState","value","color","size","padding","font","align","text","setText","width","height","bg","setBg","sizes","fontName","a","link","document","createElement","rel","type","href","split","join","getElementsByTagName","appendChild","className","rows","defaultValue","placeholder","onChange","e","console","log","target","step","onClick","loadFont","htmlFor","min","max","name","output","post","querySelector","html2canvas","scale","then","canvas","url","toDataURL","download","slice","click","saveImage","id","style","backgroundColor","fontSize","fontFamily","textAlign","map","line","Navbar","App","Nav","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.38b31137.chunk.js","sourcesContent":["import html2canvas from 'html2canvas';\r\nimport { useState } from 'react';\r\nimport { BiSave, BiAlignMiddle, BiAlignLeft, BiAlignRight } from 'react-icons/bi';\r\n\r\nconst Display = () => {\r\n    const [text, setText] = useState({ value: \"Here.\", color: \"#fff\", size: 24, padding: 20, font: 'Segoe UI', align: 'center' });\r\n    const [bg, setBg] = useState({ color: \"#000\", width: 1080, height: 1080, padding: 20 });\r\n    const sizes = { coverPhoto: [1500, 500], highligths: [1080, 1920], sqaures: [1080, 1080] }; //width x hieght\r\n\r\n    function saveImage(output) {\r\n        const post = document.querySelector('#post');\r\n        html2canvas(post, { scale: 4 }).then(canvas => {\r\n            const url = canvas.toDataURL();\r\n            const download = document.createElement('a');\r\n            download.download = `${output.slice(0, 5)}.png`;\r\n            download.href = url;\r\n            download.click();\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    async function loadFont(fontName) {\r\n        var link = document.createElement('link');\r\n        link.rel = 'stylesheet';\r\n        link.type = 'text/css';\r\n        link.href = `https://fonts.googleapis.com/css2?family=${fontName.split(' ').join('+')}&display=swap`;\r\n        document.getElementsByTagName('head')[0].appendChild(link);\r\n\r\n        return setText({ ...text, font: fontName });\r\n    }\r\n    return (\r\n        <div className=\"displaygrid\">\r\n            <div>\r\n\r\n                <div className=\"playground shadow-md\">\r\n                    <h2>Playground</h2>\r\n                    <div >\r\n\r\n                        <textarea rows='5' type=\"text\" defaultValue=\"here.\" placeholder=\"Text\" onChange={(e) => {\r\n                            console.log(e.target.value);\r\n                            setText({ ...text, value: e.target.value });\r\n                        }} />\r\n\r\n                        <input type=\"number\" className=\"text-field size\" placeholder=\"Text Size\" step=\"2\" defaultValue=\"24\" onChange={(e) => setText({ ...text, size: e.target.value })} />\r\n                        <input type=\"color\" className=\"color\" defaultValue=\"#fff\" onChange={(e) => setText({ ...text, color: e.target.value })} />\r\n                        <div className=\"align\">\r\n                            <button className=\"mar-align\" onClick={() => setText({ ...text, align: 'left' })}><BiAlignLeft size={\"1.5em\"} /></button>\r\n                            <button className=\"mar-align\" onClick={() => setText({ ...text, align: 'center' })}><BiAlignMiddle size={\"1.5em\"} /></button>\r\n                            <button className=\"mar-align\" onClick={() => setText({ ...text, align: 'right' })}><BiAlignRight size={\"1.5em\"} /></button>\r\n                            <input type=\"text\" placeholder=\"Google Font Name\" className=\"text-field\" onChange={(e) => loadFont(e.target.value)} />\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"background\">\r\n                        <span>Background</span>\r\n                        {/* <label htmlFor=\"bg\">Color</label> */}\r\n                        <label htmlFor=\"padding\">Padding</label>\r\n                        <input type=\"range\" step='2' defaultValue='20' min=\"0\" max=\"100\" name=\"padding\" onChange={(e) => setText({ ...text, padding: e.target.value })} />\r\n                        <input type=\"color\" className=\"color\" name=\"bg\" onChange={(e) => setBg({ ...bg, color: e.target.value })} />\r\n                        <div className=\"align\">\r\n                            <button className=\"mar-align b\" onClick={() => setBg({ ...bg, width: sizes.coverPhoto[0], height: sizes.coverPhoto[1] })}>coverPhoto (1.91:1)</button>\r\n                            <button className=\"mar-align b \" onClick={() => setBg({ ...bg, width: sizes.highligths[0], height: sizes.highligths[1] })}>highligths (9:16)</button>\r\n                            <button className=\"mar-align b\" onClick={() => setBg({ ...bg, width: sizes.sqaures[0], height: sizes.sqaures[1] })}>squares (1:1)</button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"centered-label\">\r\n\r\n                        <button className=\"centered-label\" onClick={() => saveImage(text.value)}><BiSave size={'2em'} /></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"display\" id=\"post\" style={{ backgroundColor: bg.color, height: `${bg.height / 4}px`, width: `${bg.width / 4}px` }}>\r\n                <p className=\"text\" style={{ color: text.color, fontSize: `${text.size}px`, padding: `0 ${text.padding}px 0 ${text.padding}px`, fontFamily: text.font, textAlign: text.align }} >\r\n                    {\r\n                        text.value.split('\\n').map(line => <p >{line}</p>)\r\n                    }</p>\r\n            </div>\r\n            <p className=\"by\">github.com/kvnal</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","const Navbar = () => {\r\n    return ( \r\n        <div className=\"shadow-md navbar\">\r\n            <h1>Words Here.</h1>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Navbar;","import './App.css';\r\nimport Display from './Components/Display';\r\nimport Navbar from './Components/Nav';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    < div className = \"App\" >\r\n      <Navbar/>\r\n      <Display/>\r\n    </div >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n\r\n"],"sourceRoot":""}